# The Challenge

# - (1) Create a bucket for storing photographs 
# - (2) Create a Pub/Sub topic that will be used by a Cloud Function you Create
# - (3) Create a Cloud Function
# - (4) Remove the previous cloud engineer's access from the memories project

# Company Standards

# Create all resources in us-east1 region and us-east1-b zone, unless otherwise directed
# Use the project VPCs
# Naming is normally "team-resource", e.g. an instance could be named kraken-webserver1
# Allocate cost effective resource sizes.  use f1-micro for small Linux VMs and n1-standard-1 for Windows or Kubernetes nodes

# (1) Create a Bucket named Bucket Name

# Instructions.  

# In Cloud Console, go to Navigation menu > Cloud Storage > Browser > Create Bucket.
# Name "memories-bucket-74097"
# Set region to us-east1-b
# Click "Next"
# Change Runtime to "Node.js 14" if not already selected
# Change Entry Point to "thumbnail"


# (2) Create Pub/Sub topic named Topic Name

# In Cloud Console, go to Pub/Sub > Topics > Create Topic > Topic ID = "memories-topic-586".


# (3) Create Cloud Function called Cloud Function Name that executes every time an object is created in Bucket Name from task 1
# Function is written in Node.js 14.
# Entry point is set to "thumbnail", Trigger set to "Cloud Storage"

# In Cloud Console Navigation Menu > Cloud Functions > Create function > memories-thumbnail-creator
# Set region to useast_1

# Replace text "REPLACE_WITH_YOUR_TOPIC ID with "MyTopic" at line 15 of index.js

# Open index.js > paste code: 

/* globals exports, require */
//jshint strict: false
//jshint esversion: 6
"use strict";
const crc32 = require("fast-crc32c");
const { Storage } = require('@google-cloud/storage');
const gcs = new Storage();
const { PubSub } = require('@google-cloud/pubsub');
const imagemagick = require("imagemagick-stream");
exports.thumbnail = (event, context) => {
  const fileName = event.name;
  const bucketName = event.bucket;
  const size = "64x64"
  const bucket = gcs.bucket(bucketName);
  const topicName = "memories-topic-586";
  const pubsub = new PubSub();
  if ( fileName.search("64x64_thumbnail") == -1 ){
    // doesn't have a thumbnail, get the filename extension
    var filename_split = fileName.split('.');
    var filename_ext = filename_split[filename_split.length - 1];
    var filename_without_ext = fileName.substring(0, fileName.length - filename_ext.length );
    if (filename_ext.toLowerCase() == 'png' || filename_ext.toLowerCase() == 'jpg'){
      // only support png and jpg at this point
      console.log(`Processing Original: gs://${bucketName}/${fileName}`);
      const gcsObject = bucket.file(fileName);
      let newFilename = filename_without_ext + size + '_thumbnail.' + filename_ext;
      let gcsNewObject = bucket.file(newFilename);
      let srcStream = gcsObject.createReadStream();
      let dstStream = gcsNewObject.createWriteStream();
      let resize = imagemagick().resize(size).quality(90);
      srcStream.pipe(resize).pipe(dstStream);
      return new Promise((resolve, reject) => {
        dstStream
          .on("error", (err) => {
            console.log(`Error: ${err}`);
            reject(err);
          })
          .on("finish", () => {
            console.log(`Success: ${fileName} â†’ ${newFilename}`);
              // set the content-type
              gcsNewObject.setMetadata(
              {
                contentType: 'image/'+ filename_ext.toLowerCase()
              }, function(err, apiResponse) {});
              pubsub
                .topic(topicName)
                .publisher()
                .publish(Buffer.from(newFilename))
                .then(messageId => {
                  console.log(`Message ${messageId} published.`);
                })
                .catch(err => {
                  console.error('ERROR:', err);
                });
          });
      });
    }
    else {
      console.log(`gs://${bucketName}/${fileName} is not an image I can handle`);
    }
  }
  else {
    console.log(`gs://${bucketName}/${fileName} already has a thumbnail`);
  }
};

#open package.json and paste:

{
  "name": "thumbnails",
  "version": "1.0.0",
  "description": "Create Thumbnail of uploaded image",
  "scripts": {
    "start": "node index.js"
  },
  "dependencies": {
    "@google-cloud/pubsub": "^2.0.0",
    "@google-cloud/storage": "^5.0.0",
    "fast-crc32c": "1.0.4",
    "imagemagick-stream": "4.1.1"
  },
  "devDependencies": {},
  "engines": {
    "node": ">=4.3.2"
  }
}

# Upload image Kitten.png from local drive
# NOTE!  Uploading this image did not complete the task.  I had to upload the image recommended in the task located at https://storage.googleapis.com/cloud-training/gsp315/map.jpg 
# To successfully get the lab to recognize the bucket has an asset in it.

# Steps.  Navigation menu > Cloud Storage > Click on Bucket name > Click Upload Files


# (4) Remove previous cloud engineer

# In Cloud Navigation Menu > IAM & Admin > IAM > Click pencil icon next to "Username 2" > click trashcan next to name > Save

# Switch to Username 2 Cloud Console using proper credentials.  

# Go to Navigation Menu > Cloud Storage > Browser.  

# Make sure that I receive permission error.  This can take up to 2 minutes to update user access

End
